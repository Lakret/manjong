%{

open Types

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Int32> NUM
%token <System.String> VAR
%token NEG EQ
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Types.Equation > start

%%

// Returns a list of query objects.
start: Equation { $1 }

Equation :
    | Equation EOF           { $1 }
    | LeftPart EQ RightPart  { Eq($1, $3) }
 
RightPart :
    | NUM                    { Int($1) }
    | NEG RightPart          { Neg($2) }

LeftPart : 
    | NUM                    { Int($1) }
    | NEG RightPart          { Neg($2) }