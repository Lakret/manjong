%{

open Types

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token POW
%token NEG
%token ADD MUL
%token EQ
%token <System.Int32> NUM
%token <System.String> VAR
%token EOF

%nonassoc NUM VAR
%left EQ
%left ADD
%left MUL
%left NEG
%left POW

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Types.Equation > start

%%

// Returns a list of query objects.
start: Equation { $1 }

Equation :
    | Equation EOF           { $1 }
    | LeftPart EQ RightPart  { Eq($1, $3) }
 
RightPart :
    | NUM                    { Int($1) }
    | NEG RightPart          { Neg($2) }

LeftPart : 
    | Expr                   { $1 }

Expr :
    | Expr POW Expr          { Pow($1, $3) }
    | Expr ADD Expr          { Add($1, $3) }
    | Expr MUL Expr          { Mul($1, $3) }
    | NEG Expr               { Neg($2) }
    | NUM                    { Int($1) }
    | VAR                    { Var($1) }